{"version":3,"sources":["logo.svg","container/SignUpForm.js","redux/actions.js","App.js","serviceWorker.js","redux/rootReducer.js","index.js"],"names":["module","exports","SignUpForm","useState","email","password","user","setUser","dispatch","useDispatch","useSelector","state","allDetails","onSubmit","e","preventDefault","console","log","type","value","name","placeholder","onChange","target","onClick","a","axios","post","data","payload","App","className","Boolean","window","location","hostname","match","initialState","rootReducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,2LC8B5BC,MAzBd,WAAuB,IAAD,EACGC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KADnC,mBACdC,EADc,KACRC,EADQ,KAEfC,EAAWC,cAOjB,OANoBC,aAAY,SAAAC,GAAK,OAAGA,EAAMC,cAO5C,6BACE,0BAAMC,SAAU,SAAAC,GAAC,OAPP,SAAAA,GACdA,EAAEC,iBACFC,QAAQC,IAAIX,GAKaO,CAASC,KAC9B,2BAAOI,KAAK,QAAQC,MAASb,EAAKF,MAAOgB,KAAK,QAAQC,YAAY,cAAcC,SAAW,SAAAR,GAAC,OAAIP,EAAQ,2BAAID,GAAL,kBAAWQ,EAAES,OAAOH,KAAMN,EAAES,OAAOJ,YAC1I,2BAAOD,KAAM,WAAWC,MAAQb,EAAKD,SAAUe,KAAK,WAAWE,SAAU,SAAAR,GAAC,OAAIP,EAAQ,2BAAID,GAAL,kBAAWQ,EAAES,OAAOH,KAAMN,EAAES,OAAOJ,UAASE,YAAY,mBAE7I,2BAAOH,KAAK,SAASM,QAAS,kBAAMhB,GClBRH,EDkBmCC,EAAKD,SClB9BD,EDkBwCE,EAAKF,MCjBvF,uCAAO,WAAMI,GAAN,iBAAAiB,EAAA,+EAGoBC,IAAMC,KAAK,+BAAgC,CAChEvB,QACAC,aALC,gBAGKuB,EAHL,EAGKA,KAKRpB,EAAS,CACPU,KAAM,cACNW,QAASD,IAVR,gDAaHZ,QAAQC,IAAR,MAbG,yDAAP,wDAD+B,IAACZ,EAAUD,QCc7B0B,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,+EACF,kBAAC,EAAD,SCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YClBAC,EAAe,CACnBzB,WAAY,IAqBC0B,MAlBf,WAAqD,IAA/B3B,EAA8B,uDAAtB0B,EAAcE,EAAQ,uCAClD,OAAQA,EAAOV,SACb,IAAK,cAEH,OAAO,2BACFlB,GADL,IAEEC,WAAW,GAAD,mBAAMD,EAAMC,YAAZ,CAAwB2B,EAAOV,YAK7C,QACE,OAAOlB,I,eCNP6B,EAAmBP,OAAOQ,sCAAwCC,IAClEC,EAAQC,YAAYN,EAAaE,EACrCK,YAAgBC,OAGlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACjB,kBAAC,EAAD,QAGFO,SAASC,eAAe,SF8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.8d468257.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { useState } from 'react';\nimport {useDispatch,useSelector} from 'react-redux'\nimport {postApplicantInfo} from './../redux/actions'\n\n function SignUpForm() {\n  const [user, setUser] = useState({ email: \"\", password: \"\" });\n  const dispatch = useDispatch()\n   const allDetails = useSelector(state =>state.allDetails)\nconst onSubmit =e=>{\n  e.preventDefault();\n  console.log(user)\n  \n}\n  return (\n    <div>\n      <form onSubmit={e => onSubmit(e)}>\n      <input type='email' value ={ user.email} name='email' placeholder='Enter Email' onChange ={e => setUser({...user,[e.target.name]:e.target.value})}/>\n      <input type ='password' value ={user.password} name='password' onChange={e => setUser({...user,[e.target.name]:e.target.value})} placeholder='Enter password'/>\n       \n      <input type='submit' onClick={() => dispatch(postApplicantInfo(user.password, user.email))}/>\n       \n      \n      </form>\n    </div>\n  )\n}\n\n\n\nexport default SignUpForm;","import axios from \"axios\"\n\nexport const postApplicantInfo = (password, email) => {\n  return async dispatch => {\n    try {\n\n      const { data } = await axios.post(\"http://localhost:3001/signUp\", {\n        email,\n        password,\n      });\n\n      dispatch({\n        type: \"ADD_DETAILS\",\n        payload: data\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SignUpForm from './container/SignUpForm'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Sign UP to add a to do !!!!!!!!!!!!!!!!!!!!!!!!</h1>\n      <SignUpForm/>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  allDetails: []\n}\n\nfunction rootReducer (state = initialState, action) {\n  switch (action.payload) {\n    case \"ADD_DETAILS\": {\n\n      return {\n        ...state,\n        allDetails: [...state.allDetails, action.payload]\n       \n      }\n\n    }\n    default: {\n      return state\n    }\n  }\n\n}\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport rootReducer from './redux/rootReducer'\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunk))\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}